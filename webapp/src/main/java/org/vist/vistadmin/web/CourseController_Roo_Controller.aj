// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.vist.vistadmin.web;

import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;
import org.vist.vistadmin.domain.Course;
import org.vist.vistadmin.domain.common.ClassFormat;
import org.vist.vistadmin.domain.common.ClassLevels;
import org.vist.vistadmin.domain.common.ClassStatus;
import org.vist.vistadmin.domain.common.ClassType;
import org.vist.vistadmin.domain.common.Languages;
import org.vist.vistadmin.service.CourseService;
import org.vist.vistadmin.web.CourseController;

privileged aspect CourseController_Roo_Controller {
    
    @Autowired
    CourseService CourseController.courseService;
    
    
    
    
    @RequestMapping(produces = "text/html")
    public String CourseController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("courses", courseService.findCourseEntries(firstResult, sizeNo));
            float nrOfPages = (float) courseService.countAllCourses() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("courses", courseService.findAllCourses());
        }
        addDateTimeFormatPatterns(uiModel);
        return "courses/list";
    }
    
    
    
    
    String CourseController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
